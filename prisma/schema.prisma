generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DEV_DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password_hash String // @db.Text
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Org           Org?      @relation(fields: [orgId], references: [id])
  orgId         String?
  role          String    @default("USER")

  @@index([orgId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id            String        @id @default(cuid())
  name          String
  service_order Int?
  users         User[]
  Customer      Customer[]
  Order         Order[]
  Appointment   Appointment[]
  payment       Payments[]
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  address     String?
  inLine      Boolean?
  birthDate   DateTime?
  age         Int?
  Org         Org           @relation(fields: [orgId], references: [id])
  orgId       String
  Order       Order[]
  Appointment Appointment[]
  Phone       Phone[]

  @@unique([id, name])
  @@index([orgId])
}

model Phone {
  id         String   @id @default(cuid())
  number     String
  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  @@index([customerId])
}

model Order {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String
  customer_name String
  Org           Org      @relation(fields: [orgId], references: [id])
  orgId         String

  dnp_right Float?
  dnp_left  Float?

  esf_right  String?
  cil_right  String?
  axle_right Int?

  esf_left  String?
  cil_left  String?
  axle_left Int?
  add       String?

  Frame    Frame[]
  Lenses   Lenses[]
  Payments Payments[]

  service_order  Int
  total          Float
  rest           Float
  situation      String
  observation    String?
  status         Boolean
  running_credit Boolean

  @@index([customerId])
  @@index([orgId])
}

model Frame {
  id        String  @id @default(cuid())
  name      String
  price     Float
  height    Float?
  reference String?
  image_url String?
  supplier  String?
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?

  @@index([orderId])
}

model Lenses {
  id      String  @id @default(cuid())
  name    String
  price   Float
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@index([orderId])
}

model Payments {
  id           String   @id @default(cuid())
  amount       Float
  type         String
  installments Int
  createdAt    DateTime @default(now())
  Order        Order?   @relation(fields: [orderId], references: [id])
  orderId      String?
  Org          Org?     @relation(fields: [orgId], references: [id])
  orgId        String?

  @@index([orderId])
  @@index([orgId])
}

model Appointment {
  id String @id @default(cuid())

  esf_right   String?
  cil_right   String?
  axle_right  Int?
  esf_left    String?
  cil_left    String?
  axle_left   Int?
  add         String?
  anamnesis   String?
  observation String?

  createdAt    DateTime @default(now())
  Customer     Customer @relation(fields: [customerId], references: [id])
  customerId   String
  customerName String
  Org          Org      @relation(fields: [orgId], references: [id])
  orgId        String

  @@index([customerId])
  @@index([orgId])
}
