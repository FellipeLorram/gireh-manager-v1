generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password_hash String
  emailVerified DateTime?
  image         String?
  orgId         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  Org           Org?      @relation(fields: [orgId], references: [id])
  UserOrg       UserOrg[]

  @@index([orgId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id            String  @id @default(cuid())
  name          String
  service_order Int?
  printType     String?
  nickName      String?

  users       User[]
  Customer    Customer[]
  Order       Order[]
  Appointment Appointment[]
  payment     Payments[]
  UserOrg     UserOrg[]
}

model UserOrg {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  orgId  String
  org    Org    @relation(fields: [orgId], references: [id])

  @@id([userId, orgId])
  @@index([userId])
  @@index([orgId])
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  address     String?
  inLine      Boolean?
  birthDate   DateTime?
  age         Int?
  orgId       String
  Org         Org           @relation(fields: [orgId], references: [id])
  Order       Order[]
  Appointment Appointment[]
  Phone       Phone[]
  entryLineAt DateTime?

  @@unique([id, name])
  @@index([orgId])
}

model Phone {
  id         String   @id @default(cuid())
  number     String
  customerId String
  Customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model Order {
  id                  String     @id @default(cuid())
  createdAt           DateTime   @default(now())
  customerId          String
  customer_name       String
  orgId               String
  dnp_right           Float?
  dnp_left            Float?
  esf_right           String?
  cil_right           String?
  axle_right          Int?
  esf_left            String?
  cil_left            String?
  axle_left           Int?
  add                 String?
  service_order       Int
  discount            Float?
  total               Float
  rest                Float
  situation           String
  observation         String?
  status              Boolean
  running_credit      Boolean
  credit_payment_days Int?
  credit_installments Int?
  credit_start_date   DateTime?
  customer            Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Org                 Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Frame               Frame[]
  Lenses              Lenses[]
  Payments            Payments[]

  @@index([customerId])
  @@index([orgId])
}

model Frame {
  id        String  @id @default(cuid())
  name      String
  price     Float
  height    Float?
  heightOe  Float?
  reference String?
  image_url String?
  supplier  String?
  orderId   String?
  Order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Lenses {
  id      String  @id @default(cuid())
  name    String
  price   Float
  orderId String?
  Order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Payments {
  id           String   @id @default(cuid())
  amount       Float
  type         String
  installments Int
  createdAt    DateTime @default(now())
  orderId      String?
  orgId        String?
  Order        Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Org          Org?     @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([orgId])
}

model Appointment {
  id           String   @id @default(cuid())
  esf_right    String?
  cil_right    String?
  axle_right   Int?
  esf_left     String?
  cil_left     String?
  axle_left    Int?
  add          String?
  anamnesis    String?
  observation  String?
  createdAt    DateTime @default(now())
  customerId   String
  customerName String
  orgId        String
  Customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Org          Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([orgId])
}
